{"name": "test_update_integration", "status": "failed", "statusDetails": {"message": "AssertionError: Failed to update integration integration_0 of type type_0 from tenant tenant1:status_code: 404 content: b'404 page not found'", "trace": "args = (<tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>,)\nkwargs = {'name': 'integration_0', 'new_name': 'integration_0_updated', 'tenant': <tests.sanity.data.Tenant object at 0x10c574650>, 'type': 'type_0'}, called_by_other_step = False\n\n    @allure.step(title or func.__name__)\n    def wrap(*args, **kwargs):\n        try:\n>           return retry_call(func, fargs=args, fkwargs=kwargs, tries=retries, delay=delay)\n\nframework/tfls/base_tfl.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/retry/api.py:101: in retry_call\n    return __retry_internal(partial(f, *args, **kwargs), exceptions, tries, delay, max_delay, backoff, jitter, logger)\n.venv/lib/python3.12/site-packages/retry/api.py:33: in __retry_internal\n    return f()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>, tenant = <tests.sanity.data.Tenant object at 0x10c574650>, name = 'integration_0', type = 'type_0'\nnew_name = 'integration_0_updated', positive = True, kwargs = {}, integration = {'id': 'b932e3f0-f9a7-4be8-898a-cfb3bfb0c6f0', 'name': 'integration_0', 'tenant_id': 'test1', 'type': 'type_0'}\nresp = <Response [404]>\n\n    @BaseTfl.step_wrapper(title=\"step_update_integration\", error=\"Failed to update integration\")\n    def step_update_integration(self, tenant, name, type, new_name, positive=True, **kwargs):\n        \"\"\"\n    \n        :param tenant:\n        :param positive:\n        :param kwargs:\n        :return:\n        \"\"\"\n        self.logger.info(f\"updating integrations {name} of type {type} within tenant {tenant.tid} \"\n                         f\"with new name {new_name}\")\n        integration = self.infra.rest.integrations.get_integration_by_name_and_type(tenant=tenant, name=name, type=type)\n        if integration:\n    \n            resp = self.infra.rest.integrations.update_integration(tenant=tenant, integration_id=integration['id'],\n                                                                   name=new_name)\n            if positive and resp.status_code != 200:\n>               raise ValueError(f\"Failed to update integration {name} of type {type} from tenant {tenant.tid}:\"\n                                 f\"status_code: {resp.status_code} content: {resp.content}\")\nE               ValueError: Failed to update integration integration_0 of type type_0 from tenant tenant1:status_code: 404 content: b'404 page not found'\n\ntfls/integrations/integration_ops.py:170: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests_sanity.TestSuiteSanity object at 0x10c5388f0>, infra = <framework.infra.infra.Infra object at 0x10c460500>, TFL = <tfls.tfl.TFL object at 0x10c53a390>, setup = None, teardown = None\n\n    def test_update_integration(self, infra: Infra, TFL: TFL, setup, teardown):\n        \"\"\"\n        A test for validating basic update integration rest API\n        :param infra: a fixture for exposing all infra/framework functionality\n        :param TFL: a fixture to expose all tests steps embedded in the TFL layer\n        :param setup: a fixture for executing setup operation as preparation for the test\n        :param teardown: a fixture for executing teardown/cleanup operation after the test\n        :return: None\n        \"\"\"\n        TFL.integrations.step_create_integration(tenant=self.data.tenant1, name='integration_0', type='type_0')\n        TFL.integrations.step_validate_integration_found(tenant=self.data.tenant1, name='integration_0',\n                                                         type='type_0')\n>       TFL.integrations.step_update_integration(tenant=self.data.tenant1, name='integration_0', type='type_0',\n                                                 new_name=\"integration_0_updated\")\n\ntests/sanity/tests_sanity.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>,)\nkwargs = {'name': 'integration_0', 'new_name': 'integration_0_updated', 'tenant': <tests.sanity.data.Tenant object at 0x10c574650>, 'type': 'type_0'}, called_by_other_step = False\n\n    @allure.step(title or func.__name__)\n    def wrap(*args, **kwargs):\n        try:\n            return retry_call(func, fargs=args, fkwargs=kwargs, tries=retries, delay=delay)\n        except Exception as err:\n            if hasattr(args[0], 'logger'):\n                err = getattr(err, 'message', err)\n                args[0].logger.critical(f\"Step Failure: step {func.__name__} {(error + ' --> ') or ''}\"\n                                        f\" {err}\")\n            if hasattr(args[0], 'infra'):\n                called_by_other_step = any(\"step_\" in frame.function for frame in inspect.stack())\n            if kwargs.get('ignore_failure', None) is not True:\n>               assert False, err\nE               AssertionError: Failed to update integration integration_0 of type type_0 from tenant tenant1:status_code: 404 content: b'404 page not found'\n\nframework/tfls/base_tfl.py:46: AssertionError"}, "description": "\n        A test for validating basic update integration rest API\n        :param infra: a fixture for exposing all infra/framework functionality\n        :param TFL: a fixture to expose all tests steps embedded in the TFL layer\n        :param setup: a fixture for executing setup operation as preparation for the test\n        :param teardown: a fixture for executing teardown/cleanup operation after the test\n        :return: None\n        ", "steps": [{"name": "step_create_integration", "status": "passed", "parameters": [{"name": "args", "value": "(<tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>,)"}, {"name": "tenant", "value": "<tests.sanity.data.Tenant object at 0x10c574650>"}, {"name": "name", "value": "'integration_0'"}, {"name": "type", "value": "'type_0'"}], "start": 1732755306545, "stop": 1732755306549}, {"name": "step_validate_integration_found", "status": "passed", "parameters": [{"name": "args", "value": "(<tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>,)"}, {"name": "tenant", "value": "<tests.sanity.data.Tenant object at 0x10c574650>"}, {"name": "name", "value": "'integration_0'"}, {"name": "type", "value": "'type_0'"}], "start": 1732755306549, "stop": 1732755306552}, {"name": "step_update_integration", "status": "failed", "statusDetails": {"message": "AssertionError: Failed to update integration integration_0 of type type_0 from tenant tenant1:status_code: 404 content: b'404 page not found'\n", "trace": "  File \"/Users/macbook/PycharmProjects/firefly_assignment/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/macbook/PycharmProjects/firefly_assignment/framework/tfls/base_tfl.py\", line 46, in wrap\n    assert False, err\n           ^^^^^\n"}, "parameters": [{"name": "args", "value": "(<tfls.integrations.integration_ops.IntegrationsOps object at 0x10c53a150>,)"}, {"name": "tenant", "value": "<tests.sanity.data.Tenant object at 0x10c574650>"}, {"name": "name", "value": "'integration_0'"}, {"name": "type", "value": "'type_0'"}, {"name": "new_name", "value": "'integration_0_updated'"}], "start": 1732755306552, "stop": 1732755306604}], "start": 1732755306545, "stop": 1732755306605, "uuid": "61525433-1e24-4ba3-a3ee-9a6e0810bbf8", "historyId": "192ce9b447e46869a1dd5405d49cfe10", "testCaseId": "192ce9b447e46869a1dd5405d49cfe10", "fullName": "tests.sanity.tests_sanity.TestSuiteSanity#test_update_integration", "labels": [{"name": "parentSuite", "value": "tests.sanity"}, {"name": "suite", "value": "tests_sanity"}, {"name": "subSuite", "value": "TestSuiteSanity"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "41427-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.sanity.tests_sanity"}]}